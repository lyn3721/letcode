package com.letcode.practice.general.array;

/**
 * @author lyn
 * @since 2022/11/9 19:10
 * 764. 最大加号标志
 * 在一个 n x n 的矩阵 grid 中，除了在数组 mines 中给出的元素为 0，其他每个元素都为 1。mines[i] = [xi, yi]表示 grid[xi][yi] == 0
 * <p>
 * 返回  grid 中包含 1 的最大的 轴对齐 加号标志的阶数 。如果未找到加号标志，则返回 0 。
 * <p>
 * 一个 k 阶由 1 组成的 “轴对称”加号标志 具有中心网格 grid[r][c] == 1 ，以及4个从中心向上、向下、向左、向右延伸，长度为 k-1，由 1 组成的臂。注意，只有加号标志的所有网格要求为 1 ，别的网格可能为 0 也可能为 1 。
 */
public class Class_764 {
    public static int orderOfLargestPlusSign(int n, int[][] mines) {
        int[][] arr = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                arr[i][j] = 1;
            }
        }
        if ((mines.length == 1 && n == 1) || (mines.length == n * n)) {
            return 0;
        }
        for (int i = 0; i < mines.length; i++) {
            int a = mines[i][0];
            int b = mines[i][1];
            arr[a][b] = 0;
        }

        int k = 1;
        int length = n;

        for (int i = 0; i < length; i++) {
            if (i == 0 || i == length - 1) {
                continue;
            }
            for (int j = 0; j < length; j++) {
                if (j == 0 || j == length - 1) {
                    continue;
                }
                if (arr[i][j] == 0) {
                    continue;
                }
                int cnt = statistic(arr, i, j);
                if (cnt > k) {
                    k = cnt;
                }
            }
        }
        return k;
    }

    /**
     * 1111
     * 1111
     * 1111
     * 1111
     *
     * @param mines
     * @param i
     * @param j
     * @return
     */

    private static int statistic(int[][] mines, int i, int j) {
        int k = 1;
        int a = 1;
        int length = mines.length;
        int left = j;
        int right = length - j - 1;
        int top = i;
        int down = length - i - 1;
        int limit = Math.min(Math.min(left, right), Math.min(top, down));
        for (int l = 0; l < limit; l++) {
            if (mines[i][j] == 1 &&
                    mines[i][j - a] == 1 &&
                    mines[i][j + a] == 1 &&
                    mines[i + a][j] == 1 &&
                    mines[i - a][j] == 1) {
                k++;
                a ++;
            } else {
                break;
            }
        }
//        while (i - a >= 0 && i + a < length && j + a < length && j - a >= 0) {
//            if (mines[i][j] == 1 &&
//                    mines[i][j - a] == 1 &&
//                    mines[i][j + a] == 1 &&
//                    mines[i + a][j] == 1 &&
//                    mines[i - a][j] == 1) {
//                k++;
//            }
//            a++;
//        }
        return k;
    }

    public static void main(String[] args) {
//        int[][] arr = new int[][]{{0, 0}, {0, 1}, {0, 2}, {0, 3}, {0, 4}, {0, 5}, {0, 6}, {0, 8}, {0, 9}, {0, 10}, {0, 11}, {0, 12}, {0, 13}, {0, 14}, {0, 16}, {0, 17}, {0, 18}, {0, 19}, {1, 1}, {1, 2}, {1, 3}, {1, 4}, {1, 6}, {1, 8}, {1, 9}, {1, 10}, {1, 11}, {1, 12}, {1, 13}, {1, 14}, {1, 15}, {1, 17}, {1, 19}, {2, 1}, {2, 4}, {2, 5}, {2, 6}, {2, 7}, {2, 8}, {2, 9}, {2, 11}, {2, 12}, {2, 13}, {2, 14}, {2, 15}, {2, 16}, {2, 17}, {2, 18}, {2, 19}, {3, 0}, {3, 1}, {3, 3}, {3, 4}, {3, 5}, {3, 6}, {3, 7}, {3, 8}, {3, 11}, {3, 13}, {3, 14}, {3, 15}, {3, 16}, {3, 17}, {3, 18}, {3, 19}, {4, 0}, {4, 1}, {4, 2}, {4, 3}, {4, 5}, {4, 7}, {4, 8}, {4, 9}, {4, 10}, {4, 11}, {4, 12}, {4, 13}, {4, 14}, {4, 16}, {4, 17}, {4, 18}, {4, 19}, {5, 0}, {5, 1}, {5, 3}, {5, 4}, {5, 5}, {5, 6}, {5, 7}, {5, 8}, {5, 9}, {5, 10}, {5, 11}, {5, 13}, {5, 14}, {5, 15}, {5, 16}, {5, 17}, {5, 19}, {6, 0}, {6, 1}, {6, 2}, {6, 4}, {6, 5}, {6, 6}, {6, 7}, {6, 8}, {6, 9}, {6, 12}, {6, 13}, {6, 15}, {6, 16}, {6, 17}, {6, 18}, {6, 19}, {7, 1}, {7, 3}, {7, 5}, {7, 6}, {7, 7}, {7, 8}, {7, 9}, {7, 10}, {7, 11}, {7, 12}, {7, 13}, {7, 14}, {7, 16}, {7, 17}, {7, 18}, {7, 19}, {8, 0}, {8, 3}, {8, 6}, {8, 7}, {8, 8}, {8, 10}, {8, 11}, {8, 13}, {8, 15}, {8, 16}, {8, 17}, {8, 18}, {8, 19}, {9, 0}, {9, 1}, {9, 3}, {9, 4}, {9, 5}, {9, 7}, {9, 9}, {9, 10}, {9, 11}, {9, 12}, {9, 14}, {9, 15}, {9, 16}, {9, 17}, {9, 18}, {9, 19}, {10, 0}, {10, 2}, {10, 3}, {10, 4}, {10, 5}, {10, 6}, {10, 7}, {10, 8}, {10, 9}, {10, 10}, {10, 11}, {10, 12}, {10, 13}, {10, 14}, {10, 15}, {10, 16}, {10, 19}, {11, 1}, {11, 2}, {11, 3}, {11, 4}, {11, 6}, {11, 7}, {11, 9}, {11, 11}, {11, 12}, {11, 13}, {11, 16}, {11, 18}, {11, 19}, {12, 0}, {12, 1}, {12, 2}, {12, 3}, {12, 5}, {12, 7}, {12, 8}, {12, 9}, {12, 10}, {12, 11}, {12, 12}, {12, 13}, {12, 14}, {12, 15}, {12, 16}, {12, 17}, {12, 18}, {12, 19}, {13, 0}, {13, 1}, {13, 3}, {13, 4}, {13, 5}, {13, 6}, {13, 7}, {13, 8}, {13, 12}, {13, 13}, {13, 14}, {13, 15}, {13, 16}, {13, 18}, {13, 19}, {14, 0}, {14, 1}, {14, 2}, {14, 3}, {14, 4}, {14, 5}, {14, 6}, {14, 7}, {14, 8}, {14, 11}, {14, 12}, {14, 13}, {14, 14}, {14, 15}, {14, 16}, {14, 17}, {14, 18}, {14, 19}, {15, 0}, {15, 1}, {15, 3}, {15, 4}, {15, 5}, {15, 7}, {15, 8}, {15, 9}, {15, 10}, {15, 13}, {15, 14}, {15, 15}, {15, 16}, {15, 17}, {15, 18}, {15, 19}, {16, 0}, {16, 1}, {16, 2}, {16, 3}, {16, 6}, {16, 7}, {16, 8}, {16, 9}, {16, 10}, {16, 11}, {16, 13}, {16, 14}, {16, 15}, {16, 16}, {16, 17}, {16, 18}, {16, 19}, {17, 0}, {17, 1}, {17, 2}, {17, 4}, {17, 6}, {17, 8}, {17, 9}, {17, 10}, {17, 12}, {17, 13}, {17, 14}, {17, 16}, {17, 17}, {17, 18}, {18, 0}, {18, 3}, {18, 4}, {18, 5}, {18, 6}, {18, 8}, {18, 9}, {18, 11}, {18, 12}, {18, 13}, {18, 14}, {18, 15}, {18, 16}, {18, 18}, {18, 19}, {19, 0}, {19, 1}, {19, 2}, {19, 3}, {19, 4}, {19, 5}, {19, 6}, {19, 7}, {19, 8}, {19, 9}, {19, 10}, {19, 12}, {19, 13}, {19, 14}, {19, 15}, {19, 17}, {19, 18}};
        int[][] arr = new int[][] {{4,2}};
        System.out.println(orderOfLargestPlusSign(5, arr));
    }
}
